// Global configuration
const CONFIG = {
    weatherAPI: 'https://api.open-meteo.com/v1/forecast',
    geocodingAPI: 'https://us1.api-bdc.net/data/reverse-geocode-client',
    updateInterval: 300000, // 5 minutes
    locationCacheTime: 3600000 // 1 hour
};

// Translations object
const translations = {
    en: {
        "app.title": "AI Outfit for Today",
        "app.subtitle": "Your AI-Powered Fashion Assistant for Any Weather",
        "header.likedOutfits": "Liked Outfits",
        "main.heading": "Get Your Outfit Recommendation",
        "main.subheading": "Select your preferences and get a personalized outfit based on current weather.",
        "gender.title": "1. Select Gender",
        "gender.female": "Female",
        "gender.male": "Male",
        "style.title": "2. Select Style",
        "style.casual": "Casual",
        "style.business": "Business",
        "style.date": "Date",
        "weather.title": "Current Weather & Location",
        "outfit.title": "Your AI-Generated Outfit Recommendation",
        "outfit.summary": "Summary",
        "outfit.clothing": "Clothing",
        "outfit.footwear": "Footwear",
        "outfit.accessories": "Accessories",
        "outfit.promptTitle": "AI Image Prompt",
        "outfit.promptGenerating": "Generating detailed outfit description for AI image creation...",
        "outfit.generateImage": "Generate AI Outfit Image",
        "outfit.loadingImage": "Generating Image...",
        "outfit.imageDisclaimer": "AI-generated image for visualization. Outfits are recommendations.",
        "products.title": "Recommended Products",
        "products.noProducts": "No product recommendations available - showing test product.",
        "liked.title": "Your Liked Outfits",
        "liked.noImages": "No liked images yet. Generate and like some outfits on the main page!",
        "footer.copy": "© 2023 AI Outfit for Today. All rights reserved.",
        "privacy.link": "Privacy Policy",
        "terms.link": "Terms of Service",
        "privacy.title": "Privacy Policy",
        "privacy.introduction": "This Privacy Policy describes how [Your Company Name/AI Outfit for Today] (\"we,\" \"us,\" or \"our\") collects, uses, and discloses your information in connection with your use of the AI Outfit for Today website and services (the \"Service\").",
        "privacy.infoCollection": "Information We Collect",
        "privacy.infoCollectionText1": "We collect information you provide directly to us when you use our Service, such as your gender and style preferences for outfit recommendations.",
        "privacy.infoCollectionText2": "When you use our Service, we may automatically collect certain information about your device, including your IP address, browser type, operating system, and geographic location (based on your IP address or browser's geolocation services, if enabled). This information is used to provide localized weather data and improve our Service.",
        "privacy.infoUsage": "How We Use Your Information",
        "privacy.infoUsageText1": "To provide and maintain our Service, including outfit recommendations and weather data.",
        "privacy.infoUsageText2": "To improve, personalize, and expand our Service.",
        "privacy.infoSharing": "How We Share Your Information",
        "privacy.infoSharingText1": "We do not sell, rent, or otherwise share your personal information with third parties for their direct marketing purposes.",
        "privacy.infoSharingText2": "We may share non-personally identifiable information (such as aggregated usage data) with third parties for analytics, research, or similar purposes.",
        "privacy.dataStorage": "Data Storage and Security",
        "privacy.dataStorageText1": "We use client-side storage (e.g., LocalStorage, IndexedDB) to store your language preference and liked outfits. This data is stored on your device and is not transmitted to our servers.",
        "privacy.changes": "Changes to This Privacy Policy",
        "privacy.changesText1": "We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page.",
        "privacy.contact": "Contact Us",
        "privacy.contactText1": "If you have any questions about this Privacy Policy, please contact us at kising26903854@gmail.com.",
        "terms.title": "Terms of Service",
        "terms.introduction": "Welcome to AI Outfit for Today. These Terms of Service (\"Terms\") govern your use of the AI Outfit for Today website and services (the \"Service\"). By accessing or using the Service, you agree to be bound by these Terms.",
        "terms.useOfService": "1. Use of Service",
        "terms.useOfServiceText1": "The Service provides AI-generated outfit recommendations based on weather data and user preferences. The outfit images are for visualization purposes only and are generated by third-party AI image services.",
        "terms.userConduct": "2. User Conduct",
        "terms.userConductText1": "You agree not to use the Service for any unlawful or prohibited activities.",
        "terms.intellectualProperty": "3. Intellectual Property",
        "terms.intellectualPropertyText1": "All content, trademarks, and intellectual property on the Service are owned by [Your Company Name/AI Outfit for Today] or its licensors. You may not use any content from the Service without prior written permission.",
        "terms.disclaimer": "4. Disclaimer of Warranties",
        "terms.disclaimerText1": "The Service is provided \"as is\" and \"as available\" without any warranties of any kind, either express or implied.",
        "terms.limitationOfLiability": "5. Limitation of Liability",
        "terms.limitationOfLiabilityText1": "In no event shall [Your Company Name/AI Outfit for Today] be liable for any indirect, incidental, special, consequential, or punitive damages arising out of or related to your use of the Service.",
        "terms.changes": "6. Changes to Terms",
        "terms.changesText1": "We reserve the right to modify or replace these Terms at any time. Your continued use of the Service after any such changes constitutes your acceptance of the new Terms.",
        "terms.contact": "7. Contact Information",
        "terms.contactText1": "If you have any questions about these Terms, please contact us at kising26903854@gmail.com.",
        "howItWorks.title": "How It Works",
        "howItWorks.steps.location.title": "Auto Location",
        "howItWorks.steps.location.description": "We detect your location automatically to get accurate local weather data",
        "howItWorks.steps.weather.title": "Weather Analysis",
        "howItWorks.steps.weather.description": "Real-time weather conditions including temperature, humidity, and conditions",
        "howItWorks.steps.ai.title": "AI Recommendation",
        "howItWorks.steps.ai.description": "Smart algorithms suggest the perfect outfit based on current weather",
        "howItWorks.steps.visual.title": "Visual Generation",
        "howItWorks.steps.visual.description": "Generate stunning AI images of your recommended outfit instantly",
        "trends.pageTitle": "Latest Trends - AI Outfit for Today",
        "trends.headerTitle": "Latest Trends",
        "trends.headerSubtitle": "Discover the hottest fashion trends powered by AI.",
        "trends.sectionTitle": "Emerging Fashion Trends",
        "trends.introText": "Stay ahead of the curve with insights into the latest fashion trends. Our AI analyzes vast amounts of fashion data to bring you predictions and highlights of what's hot.",
        "trends.trend1Title": "1. Sustainable & Eco-Conscious Fashion",
        "trends.trend1Text": "The demand for environmentally friendly clothing continues to rise. Look for natural fibers, recycled materials, and transparent supply chains.",
        "trends.trend2Title": "2. Comfort-First Athleisure",
        "trends.trend2Text": "Comfort remains key, with athleisure wear evolving to include more sophisticated designs suitable for various casual settings.",
        "trends.trend3Title": "3. Bold Colors & Statement Pieces",
        "trends.trend3Text": "After a period of muted tones, vibrant colors and unique, eye-catching statement pieces are making a comeback.",
        "trends.trend4Title": "4. Gender-Neutral Apparel",
        "trends.trend4Text": "Fashion is becoming increasingly inclusive, with more brands offering gender-neutral collections that challenge traditional norms.",
        "trends.trend5Title": "5. Vintage & Retro Revival",
        "trends.trend5Text": "Nostalgia plays a big role, with fashion drawing inspiration from past decades, particularly the 70s, 90s, and early 2000s."
    },
    ko: {
        "app.title": "오늘의 AI 코디",
        "app.subtitle": "어떤 날씨에도 AI가 추천하는 맞춤형 패션 도우미",
        "header.likedOutfits": "좋아요 누른 코디",
        "main.heading": "나만의 코디 추천 받기",
        "main.subheading": "선호도를 선택하고 현재 날씨에 맞는 맞춤형 코디를 받아보세요.",
        "gender.title": "1. 성별 선택",
        "gender.female": "여성",
        "gender.male": "남성",
        "style.title": "2. 스타일 선택",
        "style.casual": "캐주얼",
        "style.business": "비즈니스",
        "style.date": "데이트",
        "weather.title": "현재 날씨 및 위치",
        "outfit.title": "AI 생성 코디 추천",
        "outfit.summary": "요약",
        "outfit.clothing": "의류",
        "outfit.footwear": "신발",
        "outfit.accessories": "액세서리",
        "outfit.promptTitle": "AI 이미지 프롬프트",
        "outfit.promptGenerating": "AI 이미지 생성을 위한 상세 코디 설명 생성 중...",
        "outfit.generateImage": "AI 코디 이미지 생성",
        "outfit.loadingImage": "이미지 생성 중...",
        "outfit.imageDisclaimer": "시각화를 위한 AI 생성 이미지입니다. 코디는 추천 사항입니다.",
        "products.title": "추천 상품",
        "products.noProducts": "추천 상품이 없습니다 - 테스트 상품을 표시합니다.",
        "liked.title": "좋아요 누른 코디",
        "liked.noImages": "아직 좋아요를 누른 이미지가 없습니다. 메인 페이지에서 코디를 생성하고 좋아요를 눌러보세요!",
        "footer.copy": "© 2023 오늘의 AI 코디. 모든 권리 보유.",
        "privacy.link": "개인정보처리방침",
        "terms.link": "이용약관",
        "privacy.title": "개인정보처리방침",
        "privacy.introduction": "이 개인 정보 보호 정책은 [회사 이름/오늘의 AI 코디](본문에서는 \"당사\", \"저희\" 또는 \"저희의\"로 지칭)가 AI Outfit for Today 웹사이트 및 서비스(\"서비스\")와 관련하여 귀하의 정보를 수집, 사용 및 공개하는 방법을 설명합니다.",
        "privacy.infoCollection": "수집하는 정보",
        "privacy.infoCollectionText1": "당사는 귀하가 서비스 이용 시 직접 제공하는 정보(예: 코디 추천을 위한 성별 및 스타일 선호도)를 수집합니다.",
        "privacy.infoCollectionText2": "귀하가 당사 서비스를 이용할 때, 당사는 귀하의 IP 주소, 브라우저 유형, 운영 체제 및 지리적 위치(귀하의 IP 주소 또는 브라우저의 지리적 위치 서비스가 활성화된 경우 기반)를 포함한 특정 장치 정보를 자동으로 수집할 수 있습니다. 이 정보는 현지화된 날씨 데이터를 제공하고 서비스 개선을 위해 사용됩니다.",
        "privacy.infoUsage": "정보 사용 방법",
        "privacy.infoUsageText1": "코디 추천 및 날씨 데이터를 포함한 서비스 제공 및 유지.",
        "privacy.infoUsageText2": "서비스 개선, 개인화 및 확장.",
        "privacy.infoSharing": "정보 공유 방법",
        "privacy.infoSharingText1": "당사는 귀하의 개인 정보를 제3자에게 직접 마케팅 목적으로 판매, 대여 또는 공유하지 않습니다.",
        "privacy.infoSharingText2": "당사는 비식별 정보(예: 집계된 사용 데이터)를 분석, 연구 또는 유사한 목적으로 제3자와 공유할 수 있습니다.",
        "privacy.dataStorage": "데이터 저장 및 보안",
        "privacy.dataStorageText1": "당사는 귀하의 언어 기본 설정 및 좋아요를 누른 코디를 저장하기 위해 클라이언트 측 저장소(예: LocalStorage, IndexedDB)를 사용합니다. 이 데이터는 귀하의 장치에 저장되며 당사 서버로 전송되지 않습니다.",
        "privacy.changes": "개인 정보 보호 정책 변경",
        "privacy.changesText1": "당사는 개인 정보 보호 정책을 수시로 업데이트할 수 있습니다. 변경 사항이 있을 경우 이 페이지에 새로운 개인 정보 보호 정책을 게시하여 귀하에게 통지할 것입니다.",
        "privacy.contact": "문의하기",
        "privacy.contactText1": "이 개인 정보 보호 정책에 대해 질문이 있으시면 kising26903854@gmail.com으로 문의하십시오.",
        "terms.title": "이용약관",
        "terms.introduction": "AI Outfit for Today에 오신 것을 환영합니다. 본 이용약관(\"약관\")은 AI Outfit for Today 웹사이트 및 서비스(\"서비스\")의 사용에 적용됩니다. 서비스에 액세스하거나 서비스를 사용함으로써 귀하는 본 약관에 동의하는 것입니다.",
        "terms.useOfService": "1. 서비스 이용",
        "terms.useOfServiceText1": "본 서비스는 날씨 데이터 및 사용자 선호도에 기반한 AI 생성 코디 추천을 제공합니다. 코디 이미지는 시각화 목적으로만 제공되며, 타사 AI 이미지 서비스에 의해 생성됩니다.",
        "terms.userConduct": "2. 사용자 행동",
        "terms.userConductText1": "귀하는 불법적이거나 금지된 활동을 위해 서비스를 사용하지 않을 것에 동의합니다.",
        "terms.intellectualProperty": "3. 지적 재산권",
        "terms.intellectualPropertyText1": "서비스의 모든 콘텐츠, 상표 및 지적 재산권은 [회사 이름/오늘의 AI 코디] 또는 그 라이선스 제공자에게 있습니다. 사전 서면 허가 없이 서비스의 어떤 콘텐츠도 사용할 수 없습니다.",
        "terms.disclaimer": "4. 보증 부인",
        "terms.disclaimerText1": "본 서비스는 명시적이든 묵시적이든 어떠한 종류의 보증 없이 \"있는 그대로\" 및 \"이용 가능한 상태로\" 제공됩니다.",
        "terms.limitationOfLiability": "5. 책임의 제한",
        "terms.limitationOfLiabilityText1": "어떠한 경우에도 [회사 이름/오늘의 AI 코디]는 서비스 사용으로 인해 발생하거나 서비스 사용과 관련된 간접적, 부수적, 특별, 결과적 또는 징벌적 손해에 대해 책임을 지지 않습니다.",
        "terms.changes": "6. 약관 변경",
        "terms.changesText1": "당사는 언제든지 본 약관을 수정하거나 교체할 권리를 보유합니다. 그러한 변경 후에도 서비스를 계속 사용하는 것은 새로운 약관에 동의하는 것으로 간주됩니다.",
        "terms.contact": "7. 연락처 정보",
        "terms.contactText1": "If you have any questions about these Terms, please contact us at kising26903854@gmail.com.",
        "howItWorks.title": "작동 방식",
        "howItWorks.steps.location.title": "자동 위치",
        "howItWorks.steps.location.description": "정확한 현지 날씨 데이터를 얻기 위해 자동으로 귀하의 위치를 감지합니다",
        "howItWorks.steps.weather.title": "날씨 분석",
        "howItWorks.steps.weather.description": "기온, 습도, 기상 조건을 포함한 실시간 날씨 정보를 제공합니다",
        "howItWorks.steps.ai.title": "AI 추천",
        "howItWorks.steps.ai.description": "스마트 알고리즘이 현재 날씨에 맞는 완벽한 코디를 제안합니다",
        "howItWorks.steps.visual.title": "시각적 생성",
        "howItWorks.steps.visual.description": "추천 코디의 멋진 AI 이미지를 즉시 생성합니다",
        "trends.pageTitle": "최신 트렌드 - 오늘의 AI 코디",
        "trends.headerTitle": "최신 트렌드",
        "trends.headerSubtitle": "AI 기반의 최신 패션 트렌드를 발견하세요.",
        "trends.sectionTitle": "떠오르는 패션 트렌드",
        "trends.introText": "최신 패션 트렌드에 대한 인사이트로 앞서 나가세요. 저희 AI는 방대한 패션 데이터를 분석하여 뜨거운 트렌드 예측과 하이라이트를 제공합니다.",
        "trends.trend1Title": "1. 지속 가능하고 친환경적인 패션",
        "trends.trend1Text": "환경 친화적인 의류에 대한 수요는 계속 증가하고 있습니다. 천연 섬유, 재활용 재료 및 투명한 공급망을 찾아보세요.",
        "trends.trend2Title": "2. 편안함을 최우선으로 하는 애슬레저",
        "trends.trend2Text": "다양한 캐주얼 환경에 적합한 세련된 디자인을 포함하도록 애슬레저웨어가 진화하면서 편안함이 여전히 중요합니다.",
        "trends.trend3Title": "3. 대담한 색상 및 스테이트먼트 의류",
        "trends.trend3Text": "차분한 톤의 시대를 지나, 생생한 색상과 독특하고 시선을 사로잡는 스테이트먼트 의류가 다시 유행하고 있습니다.",
        "trends.trend4Title": "4. 성 중립 의류",
        "trends.trend4Text": "패션은 점점 더 포괄적으로 변하고 있으며, 더 많은 브랜드가 전통적인 규범에 도전하는 성 중립 컬렉션을 제공하고 있습니다.",
        "trends.trend5Title": "5. 빈티지 및 레트로 부활",
        "trends.trend5Text": "과거 수십 년, 특히 70년대, 90년대, 2000년대 초반에서 영감을 얻은 패션이 향수를 불러일으키며 큰 역할을 하고 있습니다."
    },
    ja: {
        "app.title": "今日のAIコーデ",
        "app.subtitle": "どんな天気でもAIが提案するパーソナルファッションアシスタント",
        "header.likedOutfits": "いいねしたコーデ",
        "main.heading": "あなたへのおすすめコーデをチェック",
        "main.subheading": "あなたの好みを選択して、現在の天気に基づいたパーソナルなコーデをゲットしましょう。",
        "gender.title": "1. 性別を選択",
        "gender.female": "女性",
        "gender.male": "男性",
        "style.title": "2. スタイルを選択",
        "style.casual": "カジュアル",
        "style.business": "ビジネス",
        "style.date": "デート",
        "weather.title": "現在の天気と場所",
        "outfit.title": "AI生成コーデのおすすめ",
        "outfit.summary": "概要",
        "outfit.clothing": "服装",
        "outfit.footwear": "履物",
        "outfit.accessories": "アクセサリー",
        "outfit.promptTitle": "AI画像プロンプト",
        "outfit.promptGenerating": "AI画像作成のための詳細なコーデ説明を生成中...",
        "outfit.generateImage": "AIコーデ画像を生成",
        "outfit.loadingImage": "画像を生成中...",
        "outfit.imageDisclaimer": "視覚化のためのAI生成画像です。コーデは推奨事項です。",
        "products.title": "おすすめ商品",
        "products.noProducts": "おすすめ商品はありません - テスト商品を表示しています。",
        "liked.title": "いいねしたコーデ",
        "liked.noImages": "まだいいねした画像がありません。メインページでコーデを生成していいねしてください！",
        "footer.copy": "© 2023 今日のAIコーデ. 無断複写・転載を禁じます.",
        "privacy.link": "プライバシーポリシー",
        "terms.link": "利用規約",
        "privacy.title": "プライバシーポリシー",
        "privacy.introduction": "このプライバシーポリシーは、[貴社名/AI Outfit for Today]（本サービスでは\"当社\"と総称）がAI Outfit for Todayウェブサイトおよびサービス（\"本サービス\"）に関連して、お客様の情報を収集、使用、開示する方法を説明します。",
        "privacy.infoCollection": "収集する情報",
        "privacy.infoCollectionText1": "当社は、お客様が本サービスを利用する際に直接提供する情報（コーデのおすすめに関する性別やスタイルの好みなど）を収集します。",
        "privacy.infoCollectionText2": "お客様が本サービスを利用する際、当社はIPアドレス、ブラウザの種類、オペレーティングシステム、地理的位置（IPアドレスまたはブラウザの地理位置情報サービスが有効な場合に基づく）など、お客様のデバイスに関する特定の情報を自動的に収集する場合があります。この情報は、地域に特化した天気データを提供し、本サービスを改善するために使用されます。",
        "privacy.infoUsage": "情報の使用方法",
        "privacy.infoUsageText1": "コーデのおすすめや天気データを含む本サービスの提供および維持のため。",
        "privacy.infoUsageText2": "本サービスの改善、パーソナライズ、および拡張のため。",
        "privacy.infoSharing": "情報の共有方法",
        "privacy.infoSharingText1": "当社は、お客様の個人情報を第三者のダイレクトマーケティング目的で販売、貸与、またはその他の方法で共有することはありません。",
        "privacy.infoSharingText2": "当社は、分析、研究、または同様の目的のために、個人を特定できない情報（集計された利用状況データなど）を第三者と共有する場合があります。",
        "privacy.dataStorage": "データ保存とセキュリティ",
        "privacy.dataStorageText1": "当社は、お客様の言語設定やいいねしたコーデを保存するために、クライアント側のストレージ（例：LocalStorage、IndexedDB）を使用します。このデータはお客様のデバイスに保存され、当社のサーバーには送信されません。",
        "privacy.changes": "本プライバシーポリシーの変更",
        "privacy.changesText1": "当社は、本プライバシーポリシーを随時更新することがあります。変更があった場合は、このページに新しいプライバシーポリシーを掲載してお客様に通知します。",
        "privacy.contact": "お問い合わせ",
        "privacy.contactText1": "本プライバシーポリシーに関するご質問は、kising26903854@gmail.comまでお問い合わせください。",
        "terms.title": "利用規約",
        "terms.introduction": "AI Outfit for Todayにようこそ。本利用規約（\"本規約\"）は、AI Outfit for Todayのウェブサイトおよびサービス（\"本サービス\"）のご利用を規定するものです。本サービスにアクセスまたは利用することにより、お客様は本規約に拘束されることに同意したものとみなされます。",
        "terms.useOfService": "1. サービスのご利用",
        "terms.useOfServiceText1": "本サービスは、気象データとユーザーの好みに基づいてAIが生成した服装の推奨を提供します。服装の画像は視覚化のみを目的としており、第三者のAI画像サービスによって生成されます。",
        "terms.userConduct": "2. ユーザーの行為",
        "terms.userConductText1": "お客様は、違法または禁止された活動のために本サービスを利用しないことに同意します。",
        "terms.intellectualProperty": "3. 知的財産",
        "terms.intellectualPropertyText1": "本サービス上のすべてのコンテンツ、商標、および知的財産は、[貴社名/AI Outfit for Today]またはそのライセンサーが所有します。事前の書面による許可なく、本サービスのいかなるコンテンツも使用してはなりません。",
        "terms.disclaimer": "4. 保証の否認",
        "terms.disclaimerText1": "本サービスは、「現状有姿」および「利用可能な状態」で提供され、明示的または黙示的を問わず、いかなる種類の保証も行いません。",
        "terms.limitationOfLiability": "5. 責任の制限",
        "terms.limitationOfLiabilityText1": "いかなる場合も、[貴社名/AI Outfit for Today]は、お客様の本サービスのご利用に起因または関連する間接的、偶発的、特別、結果的、または懲罰的損害について責任を負わないものとします。",
        "terms.changes": "6. 規約の変更",
        "terms.changesText1": "当社は、本規約をいつでも変更または置換する権利を留保します。かかる変更後も本サービスを継続して利用することにより、お客様は新しい規約に同意したものとみなされます。",
        "terms.contact": "7. お問い合わせ",
        "terms.contactText1": "本規約に関するご質問は、kising26903854@gmail.comまでお問い合わせください。",
        "howItWorks.title": "仕組み",
        "howItWorks.steps.location.title": "自動位置情報",
        "howItWorks.steps.location.description": "正確な現地の天気データを取得するために、自動的にお客様の位置情報を検出します",
        "howItWorks.steps.weather.title": "天気分析",
        "howItWorks.steps.weather.description": "気温、湿度、気象条件を含むリアルタイムの天気情報を提供します",
        "howItWorks.steps.ai.title": "AIレコメンデーション",
        "howItWorks.steps.ai.description": "スマートなアルゴリズムが現在の天気にぴったりのコーデを提案します",
        "howItWorks.steps.visual.title": "視覚生成",
        "howItWorks.steps.visual.description": "おすすめのコーデの素晴らしいAI画像を即座に生成します",
        "trends.pageTitle": "最新トレンド - 今日のAIコーデ",
        "trends.headerTitle": "最新トレンド",
        "trends.headerSubtitle": "AIを活用した最新のファッション・トレンドを発見しましょう。",
        "trends.sectionTitle": "最新のファッショントレンド",
        "trends.introText": "最新のファッショントレンドに関する洞察を得て、流行の最先端を行きましょう。当社のAIは膨大なファッションデータを分析し、旬の予測とハイライトをお届けします。",
        "trends.trend1Title": "1. サステナブル＆エコ志向ファッション",
        "trends.trend1Text": "環境に優しい衣料品への需要は引き続き高まっています。天然繊維、リサイクル素材、透明性のあるサプライチェーンに注目しましょう。",
        "trends.trend2Title": "2. 快適性重視のアスレジャー",
        "trends.trend2Text": "快適性は依然として重要であり、アスレジャーウェアは様々なカジュアルな場面に適した洗練されたデザインへと進化しています。",
        "trends.trend3Title": "3. 大胆な色とステートメントピース",
        "trends.trend3Text": "控えめなトーンの時代を経て、鮮やかな色やユニークで目を引くステートメントピースが再燃しています。",
        "trends.trend4Title": "4. ジェンダーニュートラルアパレル",
        "trends.trend4Text": "ファッションはますます包括的になり、より多くのブランドが従来の規範に挑戦するジェンダーニュートラルなコレクションを提供しています。",
        "trends.trend5Title": "5. ヴィンテージ＆レトロリバイバル",
        "trends.trend5Text": "ノスタルジアが大きな役割を果たしており、特に70年代、90年代、2000年代初頭など、過去数十年のファッションからインスピレーションを得ています。"
    },
    zh: {
        "app.title": "今日AI穿搭",
        "app.subtitle": "您的AI驱动时尚助手，应对任何天气",
        "header.likedOutfits": "已赞穿搭",
        "main.heading": "获取您的穿搭推荐",
        "main.subheading": "选择您的偏好，根据当前天气获取个性化穿搭。",
        "gender.title": "1. 选择性别",
        "gender.female": "女性",
        "gender.male": "男性",
        "style.title": "2. 选择风格",
        "style.casual": "休闲",
        "style.business": "商务",
        "style.date": "约会",
        "weather.title": "当前天气与位置",
        "outfit.title": "您的AI生成穿搭推荐",
        "outfit.summary": "总结",
        "outfit.clothing": "服装",
        "outfit.footwear": "鞋类",
        "outfit.accessories": "配饰",
        "outfit.promptTitle": "AI图像提示",
        "outfit.promptGenerating": "正在为AI图像创建生成详细的穿搭描述...",
        "outfit.generateImage": "生成AI穿搭图片",
        "outfit.loadingImage": "正在生成图片...",
        "outfit.imageDisclaimer": "AI生成图片仅供可视化。穿搭为推荐。",
        "products.title": "推荐商品",
        "products.noProducts": "暂无商品推荐 - 显示测试商品。",
        "liked.title": "您喜欢的穿搭",
        "liked.noImages": "还没有喜欢的图片。在主页生成并点赞一些穿搭吧！",
        "footer.copy": "© 2023 今日AI穿搭. 保留所有权利.",
        "privacy.link": "隐私政策",
        "terms.link": "服务条款",
        "privacy.title": "隐私政策",
        "privacy.introduction": "本隐私政策描述了 [您的公司名称/AI Outfit for Today]（本文中简称\"我们\"）如何收集、使用和披露您在使用 AI Outfit for Today 网站和服务（\"服务\"）时提供的信息。",
        "privacy.infoCollection": "我们收集的信息",
        "privacy.infoCollectionText1": "当您使用我们的服务时，我们会收集您直接提供给我们的信息，例如您对穿搭推荐的性别和风格偏好。",
        "privacy.infoCollectionText2": "当您使用我们的服务时，我们可能会自动收集有关您设备的某些信息，包括您的IP地址、浏览器类型、操作系统和地理位置（根据您的IP地址或浏览器的地理定位服务，如果启用）。此信息用于提供本地化天气数据和改进我们的服务。",
        "privacy.infoUsage": "我们如何使用您的信息",
        "privacy.infoUsageText1": "提供和维护我们的服务，包括穿搭推荐和天气数据。",
        "privacy.infoUsageText2": "改进、个性化和扩展我们的服务。",
        "privacy.infoSharing": "我们如何共享您的信息",
        "privacy.infoSharingText1": "我们不会出售、出租或以其他方式将您的个人信息共享给第三方用于其直接营销目的。",
        "privacy.infoSharingText2": "我们可能会与第三方共享非个人身份信息（例如汇总使用数据），用于分析、研究或类似目的。",
        "privacy.dataStorage": "数据存储和安全",
        "privacy.dataStorageText1": "我们使用客户端存储（例如 LocalStorage、IndexedDB）来存储您的语言偏好和喜欢的穿搭。此数据存储在您的设备上，不会传输到我们的服务器。",
        "privacy.changes": "本隐私政策的变更",
        "privacy.changesText1": "我们可能会不时更新我们的隐私政策。我们将通过在此页面上发布新的隐私政策来通知您任何更改。",
        "privacy.contact": "联系我们",
        "privacy.contactText1": "如果您对本隐私政策有任何疑问，请通过 kising26903854@gmail.com 联系我们。",
        "terms.title": "服务条款",
        "terms.introduction": "欢迎来到 AI Outfit for Today。本服务条款（\"条款\"）约束您对 AI Outfit for Today 网站和服务（\"服务\"）的使用。通过访问或使用本服务，即表示您同意受本条款的约束。",
        "terms.useOfService": "1. 服务使用",
        "terms.useOfServiceText1": "本服务提供基于天气数据和用户偏好的AI生成穿搭推荐。穿搭图片仅供可视化目的，由第三方AI图片服务生成。",
        "terms.userConduct": "2. 用户行为",
        "terms.userConductText1": "您同意不将本服务用于任何非法或被禁止的活动。",
        "terms.intellectualProperty": "3. 知识产权",
        "terms.intellectualPropertyText1": "本服务上的所有内容、商标和知识产权均归属于 [您的公司名称/AI Outfit for Today] 或其许可方。未经事先书面许可，您不得使用本服务中的任何内容。",
        "terms.disclaimer": "4. 免责声明",
        "terms.disclaimerText1": "本服务按\"原样\"和\"现有\"基础提供，不提供任何明示或暗示的保证。",
        "terms.limitationOfLiability": "5. 责任限制",
        "terms.limitationOfLiabilityText1": "在任何情况下，[您的公司名称/AI Outfit for Today] 均不对因您使用本服务而引起或与使用本服务相关的任何间接、偶然、特殊、后果性或惩罚性损害承担责任。",
        "terms.changes": "6. 条款变更",
        "terms.changesText1": "我们保留随时修改或替换这些条款的权利。您在任何此类更改后继续使用本服务即表示您接受新的条款。",
        "terms.contact": "7. 联系信息",
        "terms.contactText1": "如果您对本条款有任何疑问，请通过 kising26903854@gmail.com 联系我们。",
        "howItWorks.title": "工作原理",
        "howItWorks.steps.location.title": "自动定位",
        "howItWorks.steps.location.description": "我们自动检测您的位置以获取准确的本地天气数据",
        "howItWorks.steps.weather.title": "天气分析",
        "howItWorks.steps.weather.description": "提供包括温度、湿度和天气条件在内的实时天气信息",
        "howItWorks.steps.ai.title": "AI推荐",
        "howItWorks.steps.ai.description": "智能算法根据当前天气推荐完美的穿搭",
        "howItWorks.steps.visual.title": "视觉生成",
        "howItWorks.steps.visual.description": "即时生成您推荐穿搭的精美AI图片",
        "trends.pageTitle": "最新趋势 - 今日AI穿搭",
        "trends.headerTitle": "最新趋势",
        "trends.headerSubtitle": "探索由AI驱动的最新时尚趋势。",
        "trends.sectionTitle": "新兴时尚趋势",
        "trends.introText": "通过对最新时尚趋势的洞察，保持领先。我们的AI分析海量时尚数据，为您带来热门预测和亮点。",
        "trends.trend1Title": "1. 可持续和环保时尚",
        "trends.trend1Text": "对环保服装的需求持续增长。关注天然纤维、回收材料和透明的供应链。",
        "trends.trend2Title": "2. 舒适至上的运动休闲",
        "trends.trend2Text": "舒适性依然是关键，运动休闲服饰正在演变为适合各种休闲场合的更精致设计。",
        "trends.trend3Title": "3. 大胆色彩与个性单品",
        "trends.trend3Text": "在经历了一段柔和色调的时期后，鲜艳的色彩和独特、引人注目的个性单品正在卷土重来。",
        "trends.trend4Title": "4. 无性别服装",
        "trends.trend4Text": "时尚正变得越来越包容，越来越多的品牌提供挑战传统规范的无性别系列。",
        "trends.trend5Title": "5. 复古潮流回归",
        "trends.trend5Text": "怀旧情结扮演着重要角色，时尚从过去的几十年中汲取灵感，尤其是70年代、90年代和2000年代初期。"
    }
};

// Function to apply translations
function applyTranslations(lang) {
    document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.dataset.i18n;
        if (translations[lang] && translations[lang][key]) {
            element.textContent = translations[lang][key];
        } else if (translations.en[key]) {
            // Fallback to English if translation not found for selected language
            element.textContent = translations.en[key];
        }
    });
}

// Global state
let appState = {
    currentWeather: null,
    currentLocation: null,
    outfitPrompt: '',
    selectedGender: 'female', // Default to female
    selectedStyle: 'casual', // Default to casual
    recommendedProducts: [],
    isLoading: false,
    steps: {
        location: false,
        weather: false,
        outfit: false,
        image: false
    }
};

// IndexedDB setup
const DB_NAME = 'AIOutfitDB';
const DB_VERSION = 1;
const STORE_NAME = 'likedOutfits';
let db;

async function openIndexedDB() {
    if (db && db.readyState === 'open') {
        console.log('IndexedDB: Connection already open, reusing.');
        return db;
    }

    return new Promise((resolve, reject) => {
        const request = indexedDB.open(DB_NAME, DB_VERSION);

        request.onupgradeneeded = (event) => {
            db = event.target.result;
            if (!db.objectStoreNames.contains(STORE_NAME)) {
                const objectStore = db.createObjectStore(STORE_NAME, { keyPath: 'id' });
                objectStore.createIndex('timestamp', 'timestamp', { unique: false });
                console.log('IndexedDB: Object store created');
            }
        };

        request.onsuccess = (event) => {
            db = event.target.result;
            console.log('IndexedDB: Database opened successfully');
            resolve(db);
        };

        request.onerror = (event) => {
            console.error('IndexedDB: Database error:', event.target.errorCode);
            reject(event.target.error);
        };
    });
}

async function saveLikedOutfit(outfitData) {
    await openIndexedDB(); // Ensure DB is open before transaction

    if (!db) {
        console.error('IndexedDB not initialized after opening attempt.');
        return;
    }

    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const store = transaction.objectStore(STORE_NAME);

    // Generate a unique ID for the outfit
    outfitData.id = `outfit-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;
    outfitData.timestamp = Date.now();

    const request = store.add(outfitData);

    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            console.log('IndexedDB: Outfit saved successfully:', outfitData.id);
            resolve(outfitData);
        };
        request.onerror = (event) => {
            console.error('IndexedDB: Error saving outfit:', event.target.error);
            reject(event.target.error);
        };
    });
}

async function getLikedOutfits() {
    await openIndexedDB(); // Ensure DB is open before transaction

    if (!db) {
        console.error('IndexedDB not initialized after opening attempt.');
        return [];
    }

    const transaction = db.transaction([STORE_NAME], 'readonly');
    const store = transaction.objectStore(STORE_NAME);
    const request = store.getAll();

    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            console.log('IndexedDB: Liked outfits retrieved:', request.result);
            resolve(request.result);
        };
        request.onerror = (event) => {
            console.error('IndexedDB: Error getting liked outfits:', event.target.error);
            reject(event.target.error);
        };
    });
}

async function deleteLikedOutfit(id) {
    await openIndexedDB(); // Ensure DB is open before transaction

    if (!db) {
        console.error('IndexedDB not initialized after opening attempt.');
        return;
    }

    const transaction = db.transaction([STORE_NAME], 'readwrite');
    const store = transaction.objectStore(STORE_NAME);
    const request = store.delete(id);

    return new Promise((resolve, reject) => {
        request.onsuccess = () => {
            console.log('IndexedDB: Outfit deleted successfully:', id);
            resolve();
        };
        request.onerror = (event) => {
            console.error('IndexedDB: Error deleting outfit:', event.target.error);
            reject(event.target.error);
        };
    });
}

// Amazon Affiliate Product Database
const AMAZON_PRODUCTS = {
    // Women's Clothing
    female: {
        winter_coat: {
            name: "Women's Winter Puffer Coat",
            price: "$89.99",
            image: "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/women-winter-coat",
            category: "outerwear"
        },
        spring_jacket: {
            name: "Lightweight Spring Jacket",
            price: "$49.99",
            image: "https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/women-spring-jacket",
            category: "outerwear"
        },
        summer_blouse: {
            name: "Flowy Summer Blouse",
            price: "$29.99",
            image: "https://images.unsplash.com/photo-1620799140408-edc6dcb6d633?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/women-summer-blouse",
            category: "tops"
        },
        jeans: {
            name: "High-Waisted Skinny Jeans",
            price: "$39.99",
            image: "https://images.unsplash.com/photo-1582418702059-97ebafb35d09?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/women-jeans",
            category: "bottoms"
        },
        ankle_boots: {
            name: "Stylish Ankle Boots",
            price: "$69.99",
            image: "https://images.unsplash.com/photo-1543163521-1bf539c55dd2?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/women-ankle-boots",
            category: "shoes"
        },
        sandals: {
            name: "Comfortable Summer Sandals",
            price: "$34.99",
            image: "https://images.unsplash.com/photo-1603808033192-082d6919d3e1?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/women-sandals",
            category: "shoes"
        },
        umbrella: {
            name: "Compact Travel Umbrella",
            price: "$19.99",
            image: "https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/compact-umbrella",
            category: "accessories"
        },
        sunglasses: {
            name: "Trendy Sunglasses",
            price: "$24.99",
            image: "https://images.unsplash.com/photo-1511499767150-a48a237f0083?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/women-sunglasses",
            category: "accessories"
        }
    },
    // Men's Clothing
    male: {
        winter_jacket: {
            name: "Men's Winter Parka",
            price: "$99.99",
            image: "https://images.unsplash.com/photo-1551028719-00167b16eac5?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-winter-parka",
            category: "outerwear"
        },
        casual_jacket: {
            name: "Casual Spring Jacket",
            price: "$59.99",
            image: "https://images.unsplash.com/photo-1594938298603-c8148c4dae35?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-casual-jacket",
            category: "outerwear"
        },
        polo_shirt: {
            name: "Classic Polo Shirt",
            price: "$24.99",
            image: "https://images.unsplash.com/photo-1586790170083-2f9ceadc732d?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-polo-shirt",
            category: "tops"
        },
        chinos: {
            name: "Slim Fit Chino Pants",
            price: "$34.99",
            image: "https://images.unsplash.com/photo-1473966968600-fa801b869a1a?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-chinos",
            category: "bottoms"
        },
        sneakers: {
            name: "Casual Sneakers",
            price: "$79.99",
            image: "https://images.unsplash.com/photo-1549298916-b41d501d3772?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-sneakers",
            category: "shoes"
        },
        boat_shoes: {
            name: "Classic Boat Shoes",
            price: "$54.99",
            image: "https://images.unsplash.com/photo-1560769629-975ec94e6a86?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-boat-shoes",
            category: "shoes"
        },
        cap: {
            name: "Baseball Cap",
            price: "$18.99",
            image: "https://images.unsplash.com/photo-1588850561407-ed78c282e89b?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-baseball-cap",
            category: "accessories"
        },
        sunglasses: {
            name: "Classic Aviator Sunglasses",
            price: "$29.99",
            image: "https://images.unsplash.com/photo-1473496169904-658ba7c44d8a?w=300&h=300&fit=crop",
            affiliate: "https://amzn.to/men-sunglasses",
            category: "accessories"
        }
    }
};

// Weather code mappings for global use
const WEATHER_CODES = {
    0: { icon: '☀️', condition: 'Clear sky', severity: 'mild' },
    1: { icon: '🌤️', condition: 'Mainly clear', severity: 'mild' },
    2: { icon: '⛅', condition: 'Partly cloudy', severity: 'mild' },
    3: { icon: '☁️', condition: 'Overcast', severity: 'moderate' },
    45: { icon: '🌫️', condition: 'Fog', severity: 'moderate' },
    48: { icon: '🌫️', condition: 'Depositing rime fog', severity: 'moderate' },
    51: { icon: '🌦️', condition: 'Light drizzle', severity: 'moderate' },
    53: { icon: '🌦️', condition: 'Moderate drizzle', severity: 'moderate' },
    55: { icon: '🌧️', condition: 'Dense drizzle', severity: 'heavy' },
    56: { icon: '🌨️', condition: 'Light freezing drizzle', severity: 'heavy' },
    57: { icon: '🌨️', condition: 'Dense freezing drizzle', severity: 'heavy' },
    61: { icon: '🌧️', condition: 'Slight rain', severity: 'moderate' },
    63: { icon: '🌧️', condition: 'Moderate rain', severity: 'moderate' },
    65: { icon: '🌧️', condition: 'Heavy rain', severity: 'heavy' },
    66: { icon: '🌨️', condition: 'Light freezing rain', severity: 'heavy' },
    67: { icon: '🌨️', condition: 'Heavy freezing rain', severity: 'heavy' },
    71: { icon: '❄️', condition: 'Slight snow fall', severity: 'heavy' },
    73: { icon: '❄️', condition: 'Moderate snow fall', severity: 'heavy' },
    75: { icon: '❄️', condition: 'Heavy snow fall', severity: 'severe' },
    77: { icon: '🌨️', condition: 'Snow grains', severity: 'heavy' },
    80: { icon: '🌦️', condition: 'Slight rain showers', severity: 'moderate' },
    81: { icon: '🌧️', condition: 'Moderate rain showers', severity: 'moderate' },
    82: { icon: '⛈️', condition: 'Violent rain showers', severity: 'severe' },
    85: { icon: '🌨️', condition: 'Slight snow showers', severity: 'heavy' },
    86: { icon: '🌨️', condition: 'Heavy snow showers', severity: 'severe' },
    95: { icon: '⛈️', condition: 'Thunderstorm', severity: 'severe' },
    96: { icon: '⛈️', condition: 'Thunderstorm with slight hail', severity: 'severe' },
    99: { icon: '⛈️', condition: 'Thunderstorm with heavy hail', severity: 'severe' }
};

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

// Main app initialization
async function initializeApp() {
    console.log('🌍 AI Outfit for Today - Initializing global weather app...');
    
    // Language selection initialization moved here
    const userLang = navigator.language.split('-')[0];
    const savedLang = localStorage.getItem('selectedLanguage');
    const initialLang = savedLang || (translations[userLang] ? userLang : 'en');

    const languageSelect = document.getElementById('language-select');
    if (languageSelect) {
        languageSelect.value = initialLang;
        applyTranslations(initialLang);

        languageSelect.addEventListener('change', (event) => {
            const newLang = event.target.value;
            localStorage.setItem('selectedLanguage', newLang);
            applyTranslations(newLang);
        });
    } else {
        console.warn('⚠️ Language selector element not found on this page. Applying translations once.');
        // Apply translations once even without the selector for static pages
        applyTranslations(initialLang);
    }

    const loadingSectionCheck = document.getElementById('loading-state'); // Changed from loading-section
    const weatherSectionCheck = document.getElementById('weather-section');
    const outfitSectionCheck = document.getElementById('outfit-section');
    const errorSectionCheck = document.getElementById('error-section');
    const imageDisplayCheck = document.getElementById('image-display');
    const imageActionsCheck = document.querySelector('.image-actions'); // Use querySelector for class

    console.log('DEBUG initializeApp: loadingSectionCheck', loadingSectionCheck);
    console.log('DEBUG initializeApp: weatherSectionCheck', weatherSectionCheck);
    console.log('DEBUG initializeApp: outfitSectionCheck', outfitSectionCheck);
    console.log('DEBUG initializeApp: errorSectionCheck', errorSectionCheck);
    console.log('DEBUG initializeApp: imageDisplayCheck', imageDisplayCheck);
    console.log('DEBUG initializeApp: imageActionsCheck', imageActionsCheck);

    // Only proceed with weather/outfit logic if we are on index.html
    if (window.location.pathname === '/' || window.location.pathname === '/index.html') {
        try {
            appState.isLoading = true;
            showLoadingState();

            // Initialize IndexedDB
            await openIndexedDB();
            
            // Step 1: Get user location
            updateLoadingStep('location', 'active');
            const position = await getCurrentPosition();
            const { latitude, longitude } = position.coords;
            appState.currentLocation = { latitude, longitude };
            updateLoadingStep('location', 'completed');
            
            // Step 2: Fetch weather data
            updateLoadingStep('weather', 'active');
            const weatherData = await fetchWeatherData(latitude, longitude);
            appState.currentWeather = weatherData;
            updateLoadingStep('weather', 'completed');
            
            // Step 3: Generate outfit recommendation
            updateLoadingStep('outfit', 'active');
            const outfitData = generateOutfitRecommendation(weatherData, appState.selectedGender, appState.selectedStyle);
            appState.outfitPrompt = outfitData.prompt;
            appState.recommendedProducts = outfitData.products;
            updateLoadingStep('outfit', 'completed');
            
            // Step 4: Prepare image generation
            updateLoadingStep('image', 'active');
            await new Promise(resolve => setTimeout(resolve, 500)); // Brief pause for UX
            updateLoadingStep('image', 'completed');
            
            // Get location name for display
            const locationName = await getLocationName(latitude, longitude);
            
            // Update UI with all data
            await updateWeatherUI(weatherData, locationName);
            updateOutfitUI(outfitData);
            
            // Show main content
            hideLoadingState();
            showMainContent();
            
            appState.isLoading = false;
            console.log('✅ App initialized successfully');
            
        } catch (error) {
            console.error('❌ App initialization failed:', error);
            handleAppError(error);
            appState.isLoading = false;
        }
    } else if (window.location.pathname === '/liked.html') {
        // For liked.html, only initialize IndexedDB and display liked outfits
        console.log('DEBUG: Initializing for liked.html');
        try {
            await openIndexedDB();
            await displayLikedOutfits();
            // Hide any loading states that might appear on liked.html if not explicitly handled
            hideLoadingState(); 
        } catch (error) {
            console.error('❌ Liked page initialization failed:', error);
            // Display an error message on the liked page if something goes wrong
            const likedImagesGrid = document.getElementById('liked-images-grid');
            if (likedImagesGrid) {
                likedImagesGrid.innerHTML = '<p class="error-message">Failed to load liked images due to an error.</p>';
            }
        }
    }
}

async function initializeLikedOutfitsPage() {
    console.log('DEBUG: Initializing for liked.html');
    try {
        // Add a small delay to ensure DOM is fully ready, even with defer
        await new Promise(resolve => setTimeout(resolve, 50)); 

        await openIndexedDB();
        await displayLikedOutfits();
        // Hide any loading states that might appear on liked.html if not explicitly handled
        hideLoadingState(); 
    } catch (error) {
        console.error('❌ Liked page initialization failed:', error);
        // Display an error message on the liked page if something goes wrong
        const likedImagesGrid = document.getElementById('liked-images-grid');
        if (likedImagesGrid) {
            likedImagesGrid.innerHTML = '<p class="error-message">Failed to load liked images due to an error.</p>';
        }
    }
}

// Get current position with enhanced error handling
function getCurrentPosition() {
    return new Promise((resolve, reject) => {
        if (!navigator.geolocation) {
            reject(new Error('Geolocation is not supported by this browser'));
            return;
        }
        
        const options = {
            enableHighAccuracy: true,
            timeout: 15000,
            maximumAge: CONFIG.locationCacheTime
        };
        
        navigator.geolocation.getCurrentPosition(
            position => {
                console.log('📍 Location detected:', position.coords.latitude, position.coords.longitude);
                resolve(position);
            },
            error => {
                console.error('❌ Geolocation error:', error);
                let errorMessage = 'Unable to detect location. ';
                switch(error.code) {
                    case error.PERMISSION_DENIED:
                        errorMessage += 'Please enable location access and refresh the page.';
                        break;
                    case error.POSITION_UNAVAILABLE:
                        errorMessage += 'Location information is unavailable.';
                        break;
                    case error.TIMEOUT:
                        errorMessage += 'Location request timed out. Please try again.';
                        break;
                    default:
                        errorMessage += 'An unknown error occurred.';
                        break;
                }
                reject(new Error(errorMessage));
            },
            options
        );
    });
}

// Fetch comprehensive weather data from Open-Meteo API
async function fetchWeatherData(latitude, longitude) {
    const params = new URLSearchParams({
        latitude: latitude.toString(),
        longitude: longitude.toString(),
        current: [
            'temperature_2m',
            'relative_humidity_2m',
            'apparent_temperature',
            'weather_code',
            'wind_speed_10m',
            'wind_direction_10m'
        ].join(','),
        hourly: 'temperature_2m,weather_code',
        daily: 'temperature_2m_max,temperature_2m_min,weather_code',
        timezone: 'auto',
        forecast_days: 1
    });
    
    const url = `${CONFIG.weatherAPI}?${params}`;
    console.log('🌡️ Fetching weather data from:', url);
    
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Weather API request failed: ${response.status} ${response.statusText}`);
    }
    
    const data = await response.json();
    console.log('✅ Weather data received:', data);
    
    return {
        current: data.current,
        daily: data.daily,
        timezone: data.timezone,
        location: { latitude, longitude }
    };
}

// Get location name using reverse geocoding
async function getLocationName(latitude, longitude) {
    try {
        const currentLang = localStorage.getItem('selectedLanguage') || 'en';
        const params = new URLSearchParams({
            latitude: latitude.toString(),
            longitude: longitude.toString(),
            localityLanguage: currentLang // Request location name in current language
        });
        
        const url = `${CONFIG.geocodingAPI}?${params}`;
        console.log('📍 Fetching location name from BigDataCloud:', url);

        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`BigDataCloud Geocoding API request failed: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('✅ BigDataCloud Geocoding data received:', data);
        
        if (data.city) {
            return data.city; // Prefer city name
        } else if (data.principalSubdivision) {
            return data.principalSubdivision; // Fallback to subdivision (e.g., province/state)
        } else if (data.countryName) {
            return data.countryName; // Fallback to country name
        } else {
            return 'Your Location';
        }
    } catch (error) {
        console.warn('⚠️ Could not get accurate location name from BigDataCloud:', error);
        return 'Your Location';
    }
}

// Generate comprehensive outfit recommendation based on gender
function generateOutfitRecommendation(weatherData, gender = appState.selectedGender, style = appState.selectedStyle) {
    const current = weatherData.current;
    const temp = Math.round(current.temperature_2m);
    const feelsLike = Math.round(current.apparent_temperature);
    const humidity = current.relative_humidity_2m;
    const weatherCode = current.weather_code;
    const windSpeed = current.wind_speed_10m;
    
    const weather = WEATHER_CODES[weatherCode] || WEATHER_CODES[1];
    
    console.log('👔 Generating outfit for:', { temp, feelsLike, humidity, weatherCode, weather: weather.condition, gender, style });
    
    // Determine base clothing based on temperature
    let clothing = [];
    let footwear = [];
    let accessories = [];
    let outfitStyleDescription = '';
    let colors = [];
    
    // Temperature-based clothing selection with gender and style preferences
    if (temp <= -10) {
        if (gender === 'female') {
            clothing = ['heavy winter coat', 'thermal leggings', 'wool sweater', 'warm scarf', 'winter hat', 'insulated gloves'];
            footwear = ['insulated winter boots', 'warm wool socks'];
            outfitStyleDescription = 'cozy arctic winter';
            colors = ['deep burgundy', 'charcoal gray', 'winter white'];
        } else {
            clothing = ['heavy winter parka', 'thermal underwear', 'wool pullover', 'insulated pants', 'warm scarf', 'beanie', 'winter gloves'];
            footwear = ['insulated winter boots', 'thick wool socks'];
            outfitStyleDescription = 'rugged arctic winter';
            colors = ['dark navy', 'charcoal black', 'forest green'];
        }
    } else if (temp <= 0) {
        if (gender === 'female') {
            clothing = ['stylish winter coat', 'warm sweater', 'skinny jeans or leggings', 'fashionable scarf', 'cute beanie'];
            footwear = ['fashionable winter boots', 'warm socks'];
            outfitStyleDescription = 'chic winter';
            colors = ['camel', 'burgundy', 'cream white'];
        } else {
            clothing = ['winter jacket', 'warm hoodie or sweater', 'jeans', 'warm scarf', 'knit beanie'];
            footwear = ['winter boots', 'thick socks'];
            outfitStyleDescription = 'casual winter';
            colors = ['navy blue', 'forest green', 'charcoal'];
        }
    } else if (temp <= 10) {
        if (gender === 'female') {
            if (style === 'business') {
                clothing = ['wool blazer', 'turtleneck sweater', 'tailored trousers', 'elegant scarf'];
                footwear = ['leather ankle boots'];
                outfitStyleDescription = 'business formal autumn';
                colors = ['charcoal', 'navy', 'dark green'];
            } else if (style === 'date') {
                clothing = ['stylish trench coat', 'midi dress', 'fashionable scarf'];
                footwear = ['heeled boots'];
                outfitStyleDescription = 'romantic autumn date';
                colors = ['wine red', 'deep purple', 'black'];
            } else { // Casual
                clothing = ['trench coat or stylish jacket', 'cozy sweater', 'jeans or cute pants', 'light scarf'];
                footwear = ['ankle boots or sneakers'];
                outfitStyleDescription = 'elegant autumn';
                colors = ['camel', 'rust orange', 'olive green'];
            }
        } else {
            if (style === 'business') {
                clothing = ['wool blend overcoat', 'dress shirt', 'dress pants', 'tie'];
                footwear = ['leather dress shoes'];
                outfitStyleDescription = 'business professional autumn';
                colors = ['dark grey', 'navy blue', 'black'];
            } else if (style === 'date') {
                clothing = ['smart casual blazer', 'collared shirt', 'dark jeans or chinos'];
                footwear = ['leather boots or loafers'];
                outfitStyleDescription = 'sophisticated date night';
                colors = ['deep blue', 'burgundy', 'camel'];
            } else { // Casual
                clothing = ['casual jacket or hoodie', 'long-sleeve shirt', 'chinos or jeans', 'light scarf'];
                footwear = ['casual boots or sneakers'];
                outfitStyleDescription = 'relaxed autumn';
                colors = ['earth tones', 'burgundy', 'navy'];
            }
        }
    } else if (temp <= 15) {
        if (gender === 'female') {
            if (style === 'business') {
                clothing = ['blazer', 'silk blouse', 'pencil skirt or tailored pants'];
                footwear = ['low heels or elegant flats'];
                outfitStyleDescription = 'business chic spring';
                colors = ['light grey', 'beige', 'pastel blue'];
            } else if (style === 'date') {
                clothing = ['lightweight knit top', 'A-line skirt or flowy pants', 'denim jacket'];
                footwear = ['stylish sandals or wedges'];
                outfitStyleDescription = 'casual date spring';
                colors = ['blush pink', 'mint green', 'cream'];
            } else { // Casual
                clothing = ['light cardigan or blazer', 'blouse or long-sleeve top', 'jeans or stylish pants'];
                footwear = ['flats or low heels', 'comfortable sneakers'];
                outfitStyleDescription = 'spring chic';
                colors = ['soft pink', 'light blue', 'sage green'];
            }
        } else {
            if (style === 'business') {
                clothing = ['sport coat', 'button-down shirt', 'dress chinos', 'leather belt'];
                footwear = ['derby shoes or loafers'];
                outfitStyleDescription = 'smart business spring';
                colors = ['khaki', 'light blue', 'white'];
            } else if (style === 'date') {
                clothing = ['light knit sweater', 'dark wash jeans', 'casual blazer'];
                footwear = ['suede loafers or neat sneakers'];
                outfitStyleDescription = 'relaxed date';
                colors = ['navy', 'grey', 'olive'];
            } else { // Casual
                clothing = ['light jacket or cardigan', 'button-down shirt', 'chinos or jeans'];
                footwear = ['loafers or sneakers'];
                outfitStyleDescription = 'smart casual spring';
                colors = ['light gray', 'navy', 'khaki'];
            }
        }
    } else if (temp <= 20) {
        if (gender === 'female') {
            if (style === 'business') {
                clothing = ['lightweight blazer', 'blouse', 'culottes or wide-leg pants'];
                footwear = ['block heels or elegant flats'];
                outfitStyleDescription = 'professional summer';
                colors = ['navy', 'white', 'pastel'];
            } else if (style === 'date') {
                clothing = ['floral midi dress', 'light cardigan'];
                footwear = ['strappy sandals or espadrilles'];
                outfitStyleDescription = 'sweet summer date';
                colors = ['peach', 'lavender', 'mint'];
            } else { // Casual
                clothing = ['light sweater or blouse', 'comfortable jeans or pants', 'light cardigan'];
                footwear = ['comfortable flats or sneakers'];
                outfitStyleDescription = 'casual spring';
                colors = ['coral', 'mint green', 'soft yellow'];
            }
        } else {
            if (style === 'business') {
                clothing = ['linen blend blazer', 'light dress shirt', 'lightweight trousers'];
                footwear = ['polished loafers'];
                outfitStyleDescription = 'summer business casual';
                colors = ['light blue', 'tan', 'white'];
            } else if (style === 'date') {
                clothing = ['short-sleeve button-down', 'chinos', 'casual jacket'];
                footwear = ['clean white sneakers or driving mocs'];
                outfitStyleDescription = 'evening casual date';
                colors = ['olive green', 'navy', 'beige'];
            } else { // Casual
                clothing = ['polo shirt or casual shirt', 'chinos or jeans'];
                footwear = ['casual shoes or sneakers'];
                outfitStyleDescription = 'relaxed spring';
                colors = ['light blue', 'khaki', 'white'];
            }
        }
    } else if (temp <= 25) {
        if (gender === 'female') {
            if (style === 'business') {
                clothing = ['tailored jumpsuit or dress', 'light scarf'];
                footwear = ['comfortable pumps'];
                outfitStyleDescription = 'chic office summer';
                colors = ['cream', 'navy', 'dusty rose'];
            } else if (style === 'date') {
                clothing = ['maxi dress', 'denim jacket'];
                footwear = ['flat sandals'];
                outfitStyleDescription = 'relaxed summer date';
                colors = ['bright florals', 'aqua', 'lemon'];
            } else { // Casual
                clothing = ['cute t-shirt or blouse', 'jeans or stylish pants', 'light cardigan'];
                footwear = ['sandals or comfortable sneakers'];
                outfitStyleDescription = 'fresh casual';
                colors = ['bright coral', 'turquoise', 'sunny yellow'];
            }
        } else {
            if (style === 'business') {
                clothing = ['short-sleeve linen shirt', 'light dress pants'];
                footwear = ['breathable loafers'];
                outfitStyleDescription = 'summer corporate';
                colors = ['white', 'light grey', 'pale blue'];
            } else if (style === 'date') {
                clothing = ['stylish polo', 'linen shorts'];
                footwear = ['espadrille sneakers'];
                outfitStyleDescription = 'beach date casual';
                colors = ['pastel shades', 'coral', 'sand'];
            } else { // Casual
                clothing = ['casual t-shirt or polo', 'shorts or light pants'];
                footwear = ['sneakers or casual shoes'];
                outfitStyleDescription = 'comfortable casual';
                colors = ['navy', 'khaki', 'white'];
            }
        }
    } else if (temp <= 30) {
        if (gender === 'female') {
            if (style === 'business') {
                clothing = ['lightweight tailored dress', 'minimalist jewelry'];
                footwear = ['open-toe block heels'];
                outfitStyleDescription = 'elegant summer office';
                colors = ['crisp white', 'powder blue', 'cream'];
            } else if (style === 'date') {
                clothing = ['flowy sundress', 'strappy sandals'];
                footwear = ['wedge sandals'];
                outfitStyleDescription = 'romantic summer evening';
                colors = ['vibrant floral', 'ocean blue', 'sunset orange'];
            } else { // Casual
                clothing = ['tank top or summer blouse', 'shorts or summer dress', 'light cardigan'];
                footwear = ['sandals or summer sneakers'];
                outfitStyleDescription = 'breezy summer';
                colors = ['bright summer colors', 'coral pink', 'turquoise'];
            }
        } else {
            if (style === 'business') {
                clothing = ['light linen shirt', 'tailored shorts', 'loafers'];
                footwear = ['no-show socks'];
                outfitStyleDescription = 'smart summer business';
                colors = ['light pastels', 'beige', 'blue'];
            } else if (style === 'date') {
                clothing = ['short sleeve button-up', 'chino shorts', 'casual loafers'];
                footwear = ['leather sandals'];
                outfitStyleDescription = 'resort casual date';
                colors = ['tropical prints', 'teal', 'white'];
            } else { // Casual
                clothing = ['breathable t-shirt', 'shorts', 'light shirt'];
                footwear = ['sneakers or boat shoes'];
                outfitStyleDescription = 'summer casual';
                colors = ['light blue', 'white', 'khaki'];
            }
        }
    } else { // temp > 30
        if (gender === 'female') {
            if (style === 'business') {
                clothing = ['lightweight cotton dress', 'open-knit cardigan'];
                footwear = ['comfortable and stylish flat sandals'];
                outfitStyleDescription = 'heatwave office chic';
                colors = ['white', 'beige', 'light blue'];
            } else if (style === 'date') {
                clothing = ['flowy crop top', 'high-waisted linen shorts', 'statement earrings'];
                footwear = ['minimalist sandals'];
                outfitStyleDescription = 'hot weather casual date';
                colors = ['bold patterns', 'neon accents', 'silver'];
            } else { // Casual
                clothing = ['breathable tank top or summer top', 'shorts or light summer dress', 'sun hat'];
                footwear = ['comfortable sandals'];
                outfitStyleDescription = 'hot summer chic';
                colors = ['white', 'light pastels', 'bright coral'];
            }
        } else {
            if (style === 'business') {
                clothing = ['breathable polo shirt', 'lightweight chino shorts'];
                footwear = ['canvas espadrilles'];
                outfitStyleDescription = 'tropical business casual';
                colors = ['khaki', 'navy', 'white'];
            } else if (style === 'date') {
                clothing = ['graphic tee', 'swim shorts', 'flip-flops'];
                footwear = ['water sandals'];
                outfitStyleDescription = 'poolside date casual';
                colors = ['bright and bold', 'black', 'grey'];
            } else { // Casual
                clothing = ['lightweight t-shirt', 'shorts', 'sun hat or cap'];
                footwear = ['breathable sneakers or sandals'];
                outfitStyleDescription = 'hot summer casual';
                colors = ['white', 'light gray', 'navy'];
            }
        }
    }
    
    // Weather condition adjustments
    if (weather.severity === 'heavy' || weather.severity === 'severe') {
        if (weatherCode >= 61 && weatherCode <= 67) { // Rain
            accessories.push('umbrella', 'waterproof jacket');
            footwear = ['waterproof shoes or boots'];
        } else if (weatherCode >= 71 && weatherCode <= 77) { // Snow
            accessories.push('warm hat', 'insulated gloves');
            footwear = ['insulated waterproof boots'];
        } else if (weatherCode >= 95) { // Thunderstorm
            accessories.push('waterproof jacket', 'sturdy umbrella');
        }
    } else if (weather.severity === 'moderate') {
        if (weatherCode >= 51 && weatherCode <= 55) { // Drizzle
            accessories.push('light rain jacket');
        }
    }
    
    // Wind adjustments
    if (windSpeed > 20) {
        accessories.push('windproof outer layer');
    }
    
    // Humidity adjustments
    if (humidity > 80) {
        clothing = clothing.map(item => item.includes('breathable') ? item : `breathable ${item}`);
        outfitStyleDescription = `lightweight ${outfitStyleDescription}`;
    }
    
    // Sunny weather accessories
    if (weatherCode <= 1) {
        accessories.push('sunglasses');
        if (temp > 20) accessories.push('sun hat');
    }
    
    // Generate detailed AI prompt focused on person wearing outfit
    const personDescriptions = {
        female: ['young woman', 'stylish woman', 'fashionable lady', 'elegant female model'],
        male: ['young man', 'stylish man', 'fashionable gentleman', 'handsome male model']
    };
    const selectedPerson = personDescriptions[gender][Math.floor(Math.random() * personDescriptions[gender].length)];
    const selectedColor = colors[Math.floor(Math.random() * colors.length)] || 'stylish colors';
    
    const promptParts = [
        `A ${selectedPerson} modeling and wearing`,
        clothing.length > 0 ? clothing.slice(0, 4).join(', ') : '', // Check if clothing array is not empty
        footwear.length > 0 ? footwear.join(' and ') : '',         // Check if footwear array is not empty
        accessories.length > 0 ? `with ${accessories.slice(0, 3).join(', ')}` : '',
        `in ${selectedColor}`,
        `${outfitStyleDescription} fashion outfit`,
        `for a ${style} occasion`,
        `posing for a fashion photoshoot`,
        `outdoors in ${weather.condition.toLowerCase()} weather`,
        `${temp}°C temperature`,
        'professional fashion photography',
        'portrait style',
        'person clearly visible',
        'human model',
        'fashion model pose',
        'full body shot showing complete outfit',
        'realistic human proportions',
        'detailed clothing textures'
    ].filter(Boolean);
    
    const aiPrompt = promptParts.join(', ');
    
    // Generate human-readable summary
    const summary = `Perfect for ${temp}°C ${weather.condition.toLowerCase()} weather and a ${style} occasion. ${
        temp <= 10 ? 'Layer up to stay warm and cozy.' :
        temp <= 20 ? 'Light layers for comfortable temperature control.' :
        temp <= 30 ? 'Breathable fabrics to stay cool and comfortable.' :
        'Light, airy clothing to beat the heat.'
    }`;
    
    // Generate Amazon product recommendations
    const recommendedProducts = generateProductRecommendations(temp, weatherCode, gender, style);
    
    return {
        prompt: aiPrompt,
        summary: summary,
        clothing: clothing.slice(0, 3).join(', '),
        footwear: footwear[0] || 'comfortable shoes',
        accessories: accessories.length > 0 ? accessories.slice(0, 2).join(', ') : 'none needed',
        style: outfitStyleDescription,
        temperature: temp,
        weatherCondition: weather.condition,
        products: recommendedProducts
    };
}

// Update weather UI with comprehensive information
async function updateWeatherUI(weatherData, locationName) {
    const current = weatherData.current;
    const weather = WEATHER_CODES[current.weather_code] || WEATHER_CODES[1];
    
    // Update weather display
    const weatherIconElement = document.getElementById('weather-icon');
    const temperatureElement = document.getElementById('temperature');
    const weatherConditionElement = document.getElementById('weather-condition');
    const feelsLikeElement = document.getElementById('feels-like');
    const humidityElement = document.getElementById('humidity');
    const locationNameElement = document.getElementById('location-name');
    const localTimeElement = document.getElementById('local-time');

    if (weatherIconElement) weatherIconElement.textContent = weather.icon;
    if (temperatureElement) temperatureElement.textContent = `${Math.round(current.temperature_2m)}°C`;
    if (weatherConditionElement) weatherConditionElement.textContent = weather.condition;
    if (feelsLikeElement) feelsLikeElement.textContent = `Feels like ${Math.round(current.apparent_temperature)}°C`;
    if (humidityElement) humidityElement.textContent = `Humidity ${current.relative_humidity_2m}%`;
    if (locationNameElement) locationNameElement.textContent = `📍 ${locationName}`;
    
    // Update local time
    try {
        const now = new Date();
        const timeString = now.toLocaleTimeString([], { 
            hour: '2-digit', 
            minute: '2-digit',
            timeZoneName: 'short'
        });
        if (localTimeElement) localTimeElement.textContent = `🕐 ${timeString}`;
    } catch (error) {
        if (localTimeElement) localTimeElement.textContent = ' Local time';
    }
}

// Generate Amazon product recommendations based on weather
function generateProductRecommendations(temp, weatherCode, gender, style) {
    console.log('🛍️ Generating products for:', { temp, weatherCode, gender, style });
    
    const products = [];
    const genderProducts = AMAZON_PRODUCTS[gender];
    
    if (!genderProducts) {
        console.error('❌ No products found for gender:', gender);
        return [];
    }
    
    console.log('✅ Available products for', gender, ':', Object.keys(genderProducts));
    
    // Temperature-based recommendations
    if (temp <= 0) {
        // Winter products
        if (gender === 'female') {
            if (genderProducts.winter_coat) products.push(genderProducts.winter_coat);
            if (genderProducts.ankle_boots) products.push(genderProducts.ankle_boots);
        } else {
            if (genderProducts.winter_jacket) products.push(genderProducts.winter_jacket);
            if (genderProducts.sneakers) products.push(genderProducts.sneakers);
        }
    } else if (temp <= 15) {
        // Spring/Fall products
        if (gender === 'female') {
            if (genderProducts.spring_jacket) products.push(genderProducts.spring_jacket);
            if (genderProducts.jeans) products.push(genderProducts.jeans);
            if (genderProducts.ankle_boots) products.push(genderProducts.ankle_boots);
        } else {
            if (genderProducts.casual_jacket) products.push(genderProducts.casual_jacket);
            if (genderProducts.chinos) products.push(genderProducts.chinos);
            if (genderProducts.sneakers) products.push(genderProducts.sneakers);
        }
    } else if (temp <= 25) {
        // Mild weather products
        if (gender === 'female') {
            if (genderProducts.summer_blouse) products.push(genderProducts.summer_blouse);
            if (genderProducts.jeans) products.push(genderProducts.jeans);
            if (genderProducts.sandals) products.push(genderProducts.sandals);
        } else {
            if (genderProducts.polo_shirt) products.push(genderProducts.polo_shirt);
            if (genderProducts.chinos) products.push(genderProducts.chinos);
            if (genderProducts.boat_shoes) products.push(genderProducts.boat_shoes);
        }
    } else {
        // Hot weather products
        if (gender === 'female') {
            if (genderProducts.summer_blouse) products.push(genderProducts.summer_blouse);
            if (genderProducts.sandals) products.push(genderProducts.sandals);
        } else {
            if (genderProducts.polo_shirt) products.push(genderProducts.polo_shirt);
            if (genderProducts.boat_shoes) products.push(genderProducts.boat_shoes);
        }
    }
    
    // Weather-specific accessories
    if ([51, 53, 55, 56, 57, 61, 63, 65, 66, 67, 80, 81, 82].includes(weatherCode)) {
        // Rainy weather
        const umbrella = genderProducts.umbrella || AMAZON_PRODUCTS.female.umbrella;
        if (umbrella) products.push(umbrella);
    }
    
    if ([0, 1].includes(weatherCode) && temp > 15) {
        // Sunny weather
        if (genderProducts.sunglasses) products.push(genderProducts.sunglasses);
        if (gender === 'male' && temp > 20 && genderProducts.cap) {
            products.push(genderProducts.cap);
        }
    }
    
    // Remove duplicates and limit to 4 products
    const uniqueProducts = products.filter((product, index, self) => 
        product && index === self.findIndex(p => p && p.name === product.name)
    ).slice(0, 4);
    
    console.log('🎯 Final recommended products:', uniqueProducts.length, uniqueProducts.map(p => p.name));
    
    return uniqueProducts;
}

// Note: updateOutfitUI function moved to bottom with gender support

// Generate AI outfit image directly in the app
async function generateOutfitImage() {
    if (!appState.outfitPrompt) {
        alert('Please wait for the outfit recommendation to load first.');
        return;
    }
    
    // Get the prompt text and the entire prompt preview section (they should remain hidden)
    const aiPromptElement = document.getElementById('ai-prompt');
    const promptPreviewElement = document.querySelector('.prompt-preview');

    // Ensure the prompt elements remain hidden, or are hidden again if somehow visible
    if (aiPromptElement) {
        aiPromptElement.classList.add('hidden');
    }
    if (promptPreviewElement) {
        promptPreviewElement.classList.add('hidden');
    }

    console.log('🎨 Generating AI image with prompt:', appState.outfitPrompt);
    
    // Show loading state
    const generateBtn = document.getElementById('generate-image-btn');
    const originalContent = generateBtn.innerHTML;
    generateBtn.innerHTML = '<span class="btn-icon">⏳</span><span class="btn-text">Generating Image...</span>';
    generateBtn.disabled = true;
    
    try {
        // Wait for DOM to be ready and get the existing image container
        await new Promise(resolve => {
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', resolve);
            } else {
                resolve();
            }
        });
        
        let imageContainer = document.getElementById('generated-image-container');
        if (!imageContainer) {
            console.warn('⚠️ Image container not found, creating it...');
            console.log('📋 Available elements with IDs:', Array.from(document.querySelectorAll('[id]')).map(el => el.id));
            
            // Create the container if it doesn't exist
            imageContainer = document.createElement('div');
            imageContainer.id = 'generated-image-container';
            imageContainer.className = 'generated-image-container';
            imageContainer.style.display = 'none';
            
            // Find a good place to insert it (after the generate button)
            const generateBtn = document.getElementById('generate-image-btn');
            if (generateBtn && generateBtn.parentNode) {
                generateBtn.parentNode.insertBefore(imageContainer, generateBtn.nextSibling);
            } else {
                // Fallback: append to outfit section
                const outfitSection = document.getElementById('outfit-section');
                if (outfitSection) {
                    outfitSection.appendChild(imageContainer);
                }
            }
        }
        
        console.log('✅ Found image container:', imageContainer);
        
        // Show the container with high visibility
        imageContainer.style.display = 'block';
        imageContainer.style.visibility = 'visible';
        imageContainer.style.opacity = '1';
        imageContainer.style.position = 'relative';
        imageContainer.style.zIndex = '1000';
        
        console.log('🎯 Container made visible with styles:', {
            display: imageContainer.style.display,
            visibility: imageContainer.style.visibility,
            opacity: imageContainer.style.opacity
        });
        
        // Show loading placeholders immediately
        console.log('🎬 Showing loading placeholders...');
        const loadingPlaceholders = Array(2).fill(0).map((_, index) => `
            <div class="generated-image-item" style="animation-delay: ${index * 0.2}s;">
                <div class="image-wrapper loading">
                    <div class="image-loading-overlay">
                        <div class="loading-spinner-small"></div>
                        <div class="loading-text-small">🎨 Creating...</div>
                        <div class="loading-progress-small">
                            <div class="loading-progress-fill-small"></div>
                        </div>
                    </div>
                </div>
                <p class="image-description">Generating AI outfit image...</p>
                <p class="image-usage">Please wait</p>
            </div>
        `).join('');
        
        // Just show the loading placeholders without the big popup
        imageContainer.innerHTML = `
            <div class="generated-images-header">
                <h4>🎨 Creating Your AI-Generated Outfit</h4>
                <p>Perfect for today's weather conditions</p>
            </div>
            <div class="generated-images-grid">
                ${loadingPlaceholders}
            </div>
        `;
        
        console.log('📦 Container HTML set, checking visibility...');
        console.log('📏 Container dimensions:', imageContainer.getBoundingClientRect());
        console.log('👀 Container styles:', window.getComputedStyle(imageContainer));
        
        // Force scroll to container
        imageContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // Verify the loading element was created
        const loadingElement = imageContainer.querySelector('.image-loading');
        if (loadingElement) {
            console.log('✅ Loading element created successfully');
            console.log('📏 Loading element dimensions:', loadingElement.getBoundingClientRect());
            console.log('🎯 Container parent:', imageContainer.parentElement);
            console.log('👀 Container visible:', imageContainer.offsetHeight > 0 && imageContainer.offsetWidth > 0);
        } else {
            console.error('❌ Loading element not found!');
        }
        
        // Force scroll to the loading animation
        imageContainer.scrollIntoView({ behavior: 'smooth', block: 'center' });
        
        // Generate multiple AI images using different free services
        // Add progressive loading messages for better UX
        const loadingMessages = [
            { text: '🎨 Analyzing your outfit style...', subtext: 'Processing weather and preferences' },
            { text: '🧠 Generating AI prompt...', subtext: 'Creating detailed description' },
            { text: '✨ Creating your images...', subtext: 'AI is painting your perfect look' },
            { text: '🖼️ Finalizing results...', subtext: 'Almost ready!' }
        ];
        
        // Update loading messages progressively
        const updateLoadingMessage = (index) => {
            if (index < loadingMessages.length) {
                const message = loadingMessages[index];
                const loadingDiv = imageContainer.querySelector('.image-loading');
                if (loadingDiv) {
                    loadingDiv.querySelector('.loading-text').textContent = message.text;
                    loadingDiv.querySelector('.loading-subtext').textContent = message.subtext;
                }
            }
        };
        
        // Start image generation and progressive messages
        const imagePromise = generateMultipleImages(appState.outfitPrompt, appState.selectedGender);
        
        // Update messages every 500ms
        for (let i = 0; i < loadingMessages.length; i++) {
            setTimeout(() => updateLoadingMessage(i), i * 500);
        }
        
        // Wait for both image generation and minimum loading time
        const [imageResults] = await Promise.all([
            imagePromise,
            new Promise(resolve => setTimeout(resolve, 2000)) // Minimum 2 second loading
        ]);
        
        if (imageResults.length > 0) {
            displayGeneratedImages(imageResults, imageContainer, appState.outfitPrompt);
        } else {
            // Show error message instead of external service
            imageContainer.innerHTML = `
                <div class="image-error" style="
                    background: #fee2e2;
                    border: 2px solid #fca5a5;
                    border-radius: 12px;
                    padding: 30px;
                    text-align: center;
                    margin: 20px 0;
                ">
                    <div style="font-size: 48px; margin-bottom: 16px;">⚠️</div>
                    <h4 style="color: #dc2626; margin-bottom: 12px;">Image Generation Failed</h4>
                    <p style="color: #7f1d1d; margin-bottom: 20px;">Unable to generate images at this time. Please try again.</p>
                    <button onclick="generateOutfitImage()" style="
                        background: #dc2626;
                        color: white;
                        border: none;
                        padding: 12px 24px;
                        border-radius: 8px;
                        font-weight: 600;
                        cursor: pointer;
                    ">
                        🔄 Try Again
                    </button>
                </div>
            `;
            // Ensure the prompt preview and prompt text remain hidden on error
            if (aiPromptElement) aiPromptElement.classList.add('hidden');
            if (promptPreviewElement) promptPreviewElement.classList.add('hidden');
        }
        
    } catch (error) {
        console.error('❌ Image generation failed:', error);
        showImageGenerationError(imageContainer);
        // Ensure the prompt preview and prompt text remain hidden on error
        if (aiPromptElement) aiPromptElement.classList.add('hidden');
        if (promptPreviewElement) promptPreviewElement.classList.add('hidden');
    } finally {
        // Restore button
        generateBtn.innerHTML = originalContent;
        generateBtn.disabled = false;
    }
}

// Generate images using multiple free AI services focused on people
async function generateMultipleImages(prompt, gender) {
    const imageResults = [];
    
    try {
        // Add multiple layers of randomization for unique images
        const timestamp = Date.now();
        const randomSeed = Math.floor(Math.random() * 1000000);
        const sessionId = Math.random().toString(36).substring(7);
        
        // Gender-specific subject description
        const genderSubject = gender === 'female' ? 'a beautiful female model' : 'a handsome male model';

        // Multiple style variations for more diversity
        const styleVariations = [
            'professional fashion model',
            'stylish person',
            'elegant individual',
            'fashionable model',
            'trendy fashion influencer',
            'sophisticated dresser',
            'chic fashion enthusiast',
            'modern style icon',
            'runway model', /* New */
            'magazine cover model', /* New */
            'street style icon', /* New */
            'high fashion editorial', /* New */
            'minimalist aesthetic', /* New */
            'avant-garde fashion' /* New */
        ];
        
        const backgroundVariations = [
            'urban street background',
            'modern studio setting',
            'outdoor natural lighting',
            'minimalist backdrop',
            'city environment',
            'contemporary setting',
            'dramatic cityscape', /* New */
            'serene nature backdrop', /* New */
            'futuristic architecture', /* New */
            'vintage industrial space', /* New */
            'luxury interior' /* New */
        ];
        
        const poseVariations = [
            'confident pose',
            'casual stance',
            'elegant posture',
            'dynamic pose',
            'relaxed position',
            'fashion pose',
            'walking pose', /* New */
            'sitting pose', /* New */
            'candid shot', /* New */
            'profile view', /* New */
            'full body view' /* New */
        ];
        
        const selectedStyle = styleVariations[Math.floor(Math.random() * styleVariations.length)];
        const selectedBackground = backgroundVariations[Math.floor(Math.random() * backgroundVariations.length)];
        const selectedPose = poseVariations[Math.floor(Math.random() * poseVariations.length)];
        
        const enhancedPrompt = `${genderSubject}, ${selectedStyle} ${prompt}, ${selectedPose}, ${selectedBackground}, no objects only, no clothing items only, must show person wearing clothes, human figure required, fashion model, person visible, realistic photography, high quality, detailed`;
        
        // Method 1: Use Pollinations AI with Flux model
        const pollinationsUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(enhancedPrompt)}?width=512&height=768&model=flux&enhance=true&nologo=true&seed=${Date.now()}&timestamp=${timestamp}&session=${sessionId}`;
        imageResults.push({
            url: pollinationsUrl,
            service: 'Pollinations AI (Flux)',
            description: 'AI-generated person wearing recommended outfit',
            license: 'AI-generated content, no traditional copyright',
            usage: 'Free for personal and commercial use'
        });
        
        // Method 2: Alternative with completely different approach
        const altStyle = styleVariations[Math.floor(Math.random() * styleVariations.length)];
        const altBackground = backgroundVariations[Math.floor(Math.random() * backgroundVariations.length)];
        const altPose = poseVariations[Math.floor(Math.random() * poseVariations.length)];
        
        const altPrompt = `${genderSubject}, ${altStyle} wearing ${prompt}, ${altPose}, ${altBackground}, photorealistic, high fashion, professional photography, detailed clothing, person clearly visible, full body shot`;
        const pollinationsUrl2 = `https://image.pollinations.ai/prompt/${encodeURIComponent(altPrompt)}?width=512&height=768&model=turbo&enhance=true&seed=${Date.now() + 1}&timestamp=${timestamp + 1000}&session=${sessionId}_alt`;
        imageResults.push({
            url: pollinationsUrl2,
            service: 'Pollinations AI (Turbo)',
            description: 'Alternative fashion model in weather-appropriate outfit',
            license: 'AI-generated content, no traditional copyright',
            usage: 'Free for personal and commercial use'
        });
        
        console.log('🎨 Generated image URLs with randomization:', imageResults.map(r => r.url));
        
    } catch (error) {
        console.error('Error generating images:', error);
    }
    
    return imageResults;
}

// Display generated images in the UI
function displayGeneratedImages(imageResults, container, outfitPrompt) {
    const imagesHTML = imageResults.map((result, index) => `
        <div class="generated-image-item" style="animation-delay: ${index * 0.2}s">
            <div class="image-wrapper loading">
                <!-- Loading Animation -->
                <div class="image-loading-overlay">
                    <div class="loading-spinner-small"></div>
                    <div class="loading-text-small">🎨 Loading...</div>
                    <div class="loading-progress-small">
                        <div class="loading-progress-fill-small"></div>
                    </div>
                </div>
                
                <img src="${result.url}" alt="${result.description}" 
                     onload="this.parentElement.classList.remove('loading'); this.parentElement.classList.add('loaded')"
                     onerror="this.parentElement.classList.remove('loading'); this.parentElement.classList.add('error')">
                <div class="image-overlay">
                    <div class="image-service">${result.service}</div>
                    <div class="image-license">${result.license || 'AI-generated'}</div>
                </div>
            </div>
            <p class="image-description">${result.description}</p>
            <p class="image-usage">${result.usage || 'Free to use'}</p>
            <button class="like-button" data-image-url="${result.url}" data-prompt="${outfitPrompt}">❤️ Like</button>
        </div>
    `).join('');
    
    container.innerHTML = `
        <div class="generated-images-header">
            <h4>🎨 Your AI-Generated Outfit</h4>
            <p>Perfect for today's weather conditions</p>
        </div>
        <div class="generated-images-grid">
            ${imagesHTML}
        </div>
        <div class="image-actions">
            <button onclick="generateOutfitImage()" class="regenerate-btn">
                <span class="btn-icon">🔄</span>
                <span class="btn-text">Generate New Images</span>
            </button>
        </div>
    `;

    // Attach event listeners to like buttons
    container.querySelectorAll('.like-button').forEach(button => {
        button.addEventListener('click', async (event) => {
            const imageUrl = event.target.dataset.imageUrl;
            const prompt = event.target.dataset.prompt;
            const likedOutfit = {
                imageUrl: imageUrl,
                prompt: prompt,
                gender: appState.selectedGender,
                timestamp: Date.now()
            };
            try {
                await saveLikedOutfit(likedOutfit);
                event.target.textContent = '❤️ Liked!';
                event.target.disabled = true;
                // displayLikedOutfits(); // Refresh liked outfits display - removed as liked images are on a separate page
            } catch (error) {
                console.error('Error liking image:', error);
                alert('Failed to save liked image. Please try again.');
            }
        });
    });
    // Hide the AI image prompt element after images are displayed.
    const aiPromptElement = document.getElementById('ai-prompt');
    if (aiPromptElement) {
        aiPromptElement.classList.add('hidden');
    }
}

// Function to display generated images
async function displayGeneratedImage(imageUrl, prompt) {
    const aiGeneratedImage = document.getElementById('ai-generated-image');
    const imagePromptDisplay = document.getElementById('image-prompt-display');
    const imageDisplay = document.getElementById('image-display');
    const imageActions = document.querySelector('.image-actions'); // Use querySelector for class

    console.log('DEBUG displayGeneratedImage: aiGeneratedImage', aiGeneratedImage);
    console.log('DEBUG displayGeneratedImage: imagePromptDisplay', imagePromptDisplay);
    console.log('DEBUG displayGeneratedImage: imageDisplay', imageDisplay);
    console.log('DEBUG displayGeneratedImage: imageActions', imageActions);

    if (aiGeneratedImage) {
        aiGeneratedImage.src = imageUrl;
        aiGeneratedImage.classList.remove('hidden');
    }
    if (imagePromptDisplay) {
        imagePromptDisplay.textContent = prompt;
        imagePromptDisplay.classList.remove('hidden');
    }
    if (imageDisplay) {
        imageDisplay.classList.remove('hidden');
    }
    if (imageActions) {
        imageActions.classList.remove('hidden'); // Ensure buttons are visible
    }
}

// Function to display liked images
async function displayLikedOutfits() {
    const likedImagesGrid = document.getElementById('liked-images-grid');
    const noLikedImagesMessage = document.getElementById('no-liked-images');
    const likedImagesSection = document.getElementById('liked-images-section');

    console.log('DEBUG displayLikedOutfits: Checking elements...');
    console.log('DEBUG displayLikedOutfits: document.readyState', document.readyState);
    console.log('DEBUG displayLikedOutfits: likedImagesGrid', likedImagesGrid);
    console.log('DEBUG displayLikedOutfits: noLikedImagesMessage', noLikedImagesMessage);
    console.log('DEBUG displayLikedOutfits: likedImagesSection', likedImagesSection);
    console.log('DEBUG displayLikedOutfits: body innerHTML snippet', document.body.innerHTML.substring(document.body.innerHTML.indexOf('<section id="liked-images-section"'), document.body.innerHTML.indexOf('</section>') + 10));

    if (!likedImagesGrid || !noLikedImagesMessage || !likedImagesSection) {
        console.error('Required elements for liked images display not found.');
        return;
    }

    try {
        const likedOutfits = await getLikedOutfits();

        if (likedOutfits.length === 0) {
            likedImagesGrid.innerHTML = ''; // Clear grid
            noLikedImagesMessage.style.display = 'block'; // Show message
            likedImagesSection.classList.add('hidden'); // Hide section if no images
            return;
        }

        // Sort by most recent
        likedOutfits.sort((a, b) => b.timestamp - a.timestamp);

        const likedImagesHTML = likedOutfits.map(outfit => `
            <div class="liked-image-item" data-id="${outfit.id}">
                <img src="${outfit.imageUrl}" alt="${outfit.prompt}" class="liked-image">
                <div class="liked-image-overlay">
                    <button class="unlike-button" data-id="${outfit.id}">🗑️ Unlike</button>
                </div>
            </div>
        `).join('');

        likedImagesGrid.innerHTML = likedImagesHTML;
        noLikedImagesMessage.style.display = 'none'; // Hide message
        likedImagesSection.classList.remove('hidden'); // Show section

        // Attach event listeners to unlike buttons
        likedImagesGrid.querySelectorAll('.unlike-button').forEach(button => {
            button.addEventListener('click', async (event) => {
                const outfitId = event.target.dataset.id;
                const likedImageItem = event.target.closest('.liked-image-item'); // Get the parent item
                try {
                    await deleteLikedOutfit(outfitId);
                    if (likedImageItem) {
                        likedImageItem.remove(); // Immediately remove from DOM
                        console.log('DEBUG: Successfully removed liked image item from DOM.', outfitId);
                    }
                    // After removing, re-check if there are any liked outfits left to update the empty message
                    const remainingOutfits = await getLikedOutfits();
                    if (remainingOutfits.length === 0) {
                        if (noLikedImagesMessage) {
                            noLikedImagesMessage.style.display = 'block';
                        }
                        if (likedImagesGrid) {
                            likedImagesGrid.innerHTML = ''; // Ensure grid is empty
                        }
                        if (likedImagesSection) {
                            likedImagesSection.classList.add('hidden');
                        }
                    }

                } catch (error) {
                    console.error('Error unliking image:', error);
                    alert('Failed to remove liked image. Please try again.');
                }
            });
        });

    } catch (error) {
        console.error('Error displaying liked outfits:', error);
        // Safely try to update if elements exist for error message
        if (likedImagesGrid) {
            likedImagesGrid.innerHTML = '<p class="error-message">Failed to load liked images.</p>';
        }
        if (noLikedImagesMessage) {
            noLikedImagesMessage.style.display = 'none';
        }
        if (likedImagesSection) {
            likedImagesSection.classList.remove('hidden');
        }
    }
}

// Show image generation error
function showImageGenerationError(container) {
    container.innerHTML = `
        <div class="image-error">
            <div class="error-icon">⚠️</div>
            <h4>Image Generation Temporarily Unavailable</h4>
            <p>Please try generating images again in a few moments</p>
            <button onclick="generateOutfitImage()" class="retry-btn">
                <span class="btn-icon">🔄</span>
                <span class="btn-text">Try Again</span>
            </button>
        </div>
    `;
}

// Copy prompt to clipboard
function copyPromptToClipboard() {
    navigator.clipboard.writeText(appState.outfitPrompt).then(() => {
        const copyHint = document.querySelector('.copy-hint');
        if (copyHint) {
            copyHint.textContent = 'Copied!';
            setTimeout(() => {
                copyHint.textContent = 'Click to copy';
            }, 2000);
        }
    });
}

// Loading state management
function showLoadingState() {
    const loadingSection = document.getElementById('loading-section');
    const weatherSection = document.getElementById('weather-section');
    const outfitSection = document.getElementById('outfit-section');
    const productRecommendationsSection = document.querySelector('.product-recommendations');
    const howItWorksSection = document.getElementById('how-it-works-section');
    const errorSection = document.getElementById('error-section');

    // Hide all main content sections and show only loading
    if (loadingSection) loadingSection.classList.remove('hidden');
    if (weatherSection) weatherSection.classList.add('hidden');
    if (outfitSection) outfitSection.classList.add('hidden');
    if (productRecommendationsSection) productRecommendationsSection.classList.add('hidden');
    if (howItWorksSection) howItWorksSection.classList.add('hidden');
    if (errorSection) errorSection.classList.add('hidden');
}

function hideLoadingState() {
    const loadingSection = document.getElementById('loading-section');
    const weatherSection = document.getElementById('weather-section');
    const outfitSection = document.getElementById('outfit-section');
    const productRecommendationsSection = document.querySelector('.product-recommendations');
    const howItWorksSection = document.getElementById('how-it-works-section');
    const errorSection = document.getElementById('error-section');

    // Hide all main content and loading sections
    if (loadingSection) loadingSection.classList.add('hidden');
    if (weatherSection) weatherSection.classList.add('hidden');
    if (outfitSection) outfitSection.classList.add('hidden');
    if (productRecommendationsSection) productRecommendationsSection.classList.add('hidden');
    if (howItWorksSection) howItWorksSection.classList.add('hidden');
    if (errorSection) errorSection.classList.add('hidden');
}

function showMainContent() {
    const weatherSection = document.getElementById('weather-section');
    const outfitSection = document.getElementById('outfit-section');
    const productRecommendationsSection = document.querySelector('.product-recommendations');
    const howItWorksSection = document.getElementById('how-it-works-section');
    const loadingSection = document.getElementById('loading-section');
    const errorSection = document.getElementById('error-section');

    // Show main content sections, hide loading and error
    if (loadingSection) loadingSection.classList.add('hidden');
    if (errorSection) errorSection.classList.add('hidden');
    if (weatherSection) weatherSection.classList.remove('hidden');
    if (outfitSection) outfitSection.classList.remove('hidden');
    if (productRecommendationsSection) productRecommendationsSection.classList.remove('hidden');
    if (howItWorksSection) howItWorksSection.classList.remove('hidden');
}

function updateLoadingStep(stepName, status) {
    const stepElement = document.getElementById(`step-${stepName}`);
    if (stepElement) {
        stepElement.className = `step ${status}`;
        appState.steps[stepName] = status === 'completed';
    }
}

// Error handling
function handleAppError(error) {
    console.error('❌ Application error:', error);
    
    hideLoadingState(); // This hides all content except error
    const errorMessageElement = document.getElementById('error-message');
    const errorSectionElement = document.getElementById('error-section');

    if (errorMessageElement) {
        errorMessageElement.textContent = error.message || 'An unexpected error occurred. Please refresh the page and try again.';
    }
    if (errorSectionElement) {
        errorSectionElement.classList.remove('hidden');
    }
}

// Global error handler
window.addEventListener('error', function(event) {
    console.error('❌ Global error:', event.error);
    if (!appState.isLoading) {
        handleAppError(new Error('A technical error occurred. Please refresh the page.'));
    }
});

// Unhandled promise rejection handler
window.addEventListener('unhandledrejection', function(event) {
    console.error('❌ Unhandled promise rejection:', event.reason);
    if (!appState.isLoading) {
        handleAppError(new Error('A network error occurred. Please check your connection and try again.'));
    }
});

// Utility function to refresh the app
function refreshApp() {
    console.log('🔄 Refreshing app...');
    location.reload();
}

// Function to update selected preferences (gender and style)
function updatePreferences(type, value) {
    console.log(`Updating preference: ${type} to ${value}`);

    if (type === 'gender') {
        appState.selectedGender = value;
        // Update UI for gender buttons
        document.querySelectorAll('.gender-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-gender="${value}"]`).classList.add('active');
    } else if (type === 'style') {
        appState.selectedStyle = value;
        // Update UI for style buttons
        document.querySelectorAll('.style-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-style="${value}"]`).classList.add('active');
    }

    // Regenerate outfit recommendation if weather data is available
    if (appState.currentWeather) {
        try {
            const outfitData = generateOutfitRecommendation(appState.currentWeather, appState.selectedGender, appState.selectedStyle);
            appState.outfitPrompt = outfitData.prompt;
            appState.recommendedProducts = outfitData.products;
            updateOutfitUI(outfitData);

            // Clear any existing generated images
            const imageContainer = document.getElementById('generated-image-container');
            if (imageContainer) {
                imageContainer.innerHTML = ''; // Clear content
                imageContainer.style.display = 'none'; // Hide container
            }
        } catch (error) {
            console.error('Error generating outfit after preference change:', error);
            handleAppError(new Error('Failed to update outfit recommendation. Please try again.'));
        }
    }
}

// Add event listeners for gender buttons
document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.gender-btn').forEach(button => {
        button.addEventListener('click', (event) => {
            updatePreferences('gender', event.target.dataset.gender || event.target.closest('.gender-btn').dataset.gender);
        });
    });

    // Add event listener for style buttons
    document.querySelectorAll('.style-btn').forEach(button => {
        button.addEventListener('click', (event) => {
            updatePreferences('style', event.target.dataset.style || event.target.closest('.style-btn').dataset.style);
        });
    });

    // Initial update of gender UI on load (if not already handled by initializeApp)
    const initialGenderBtn = document.querySelector(`[data-gender="${appState.selectedGender}"]`);
    if (initialGenderBtn) {
        initialGenderBtn.classList.add('active');
    }

    // Initial update of style UI on load
    const initialStyleBtn = document.querySelector(`[data-style="${appState.selectedStyle}"]`);
    if (initialStyleBtn) {
        initialStyleBtn.classList.add('active');
    }
});

// Update outfit UI to show gender-specific recommendations
function updateOutfitUI(outfitData) {
    console.log('DEBUG: updateOutfitUI called with outfitData:', outfitData);
    const outfitStyleDisplayElement = document.getElementById('outfit-style-display');
    console.log('DEBUG: outfit-style-display element:', outfitStyleDisplayElement);

    if (outfitStyleDisplayElement) {
        const genderText = appState.selectedGender === 'female' ? 'Women\'s' : 'Men\'s';
        const styleText = appState.selectedStyle.charAt(0).toUpperCase() + appState.selectedStyle.slice(1); // Capitalize first letter
        
        document.getElementById('outfit-summary').textContent = outfitData.summary;
        document.getElementById('clothing-items').textContent = outfitData.clothing;
        document.getElementById('footwear').textContent = outfitData.footwear;
        document.getElementById('accessories').textContent = outfitData.accessories;
        outfitStyleDisplayElement.textContent = outfitData.style; // Using the checked element
        
        // Hide AI image prompt related elements by default
        const aiPromptElement = document.getElementById('ai-prompt');
        const promptPreviewElement = document.querySelector('.prompt-preview');

        if (aiPromptElement) aiPromptElement.classList.add('hidden');
        if (promptPreviewElement) promptPreviewElement.classList.add('hidden');

        // Update product recommendations
        updateProductRecommendations(outfitData.products);
    } else {
        console.error('ERROR: outfit-style-display element not found in DOM!');
    }
}

function updateProductRecommendations(products) {
    const productsContainer = document.getElementById('recommended-products'); // Corrected ID
    if (!productsContainer) return;

    if (products.length === 0) {
        productsContainer.innerHTML = '<p data-i18n="products.noProducts">No product recommendations available - showing test product.</p>';
        return;
    }

    const productsHTML = products.map(product => `
        <div class="product-item">
            <a href="${product.affiliate}" target="_blank" rel="noopener noreferrer" class="product-image-link">
                <img src="${product.image}" alt="${product.name}" class="product-image">
            </a>
            <div class="product-info">
                <h5 class="product-name">${product.name}</h5>
                <p class="product-price">${product.price}</p>
                <a href="${product.affiliate}" target="_blank" rel="noopener noreferrer" class="buy-now-btn">Buy Now</a>
            </div>
        </div>
    `).join('');

    productsContainer.innerHTML = productsHTML;

    // Attach translation to the "No product recommendations" message if it appears
    const noProductsMsg = productsContainer.querySelector('[data-i18n="products.noProducts"]');
    if (noProductsMsg) {
        applyTranslations(localStorage.getItem('selectedLanguage') || (translations[navigator.language.split('-')[0]] ? navigator.language.split('-')[0] : 'en'));
    }
}

// Export for global access
window.generateOutfitImage = generateOutfitImage;
window.updatePreferences = updatePreferences; // Export new function
window.refreshApp = refreshApp;
window.displayGeneratedImages = displayGeneratedImages; // Export this as well for testing if needed
window.displayLikedOutfits = displayLikedOutfits; // Export for external use
window.saveLikedOutfit = saveLikedOutfit; // Export for external use (e.g., debugging)
window.getLikedOutfits = getLikedOutfits; // Export for external use (e.g., debugging)
window.deleteLikedOutfit = deleteLikedOutfit; // Export for external use (e.g., debugging)
window.initializeLikedOutfitsPage = initializeLikedOutfitsPage; // Export for liked.html

console.log('🌍 AI Outfit for Today - Script loaded successfully'); 










